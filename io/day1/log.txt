Io> write("HELLO\n")
HELLO
==> nil
Io> 3/6
==> 0.5
Io> 3/6 + 1
==> 1.5
Io> 1 + 3 / 6
==> 1.5
Io> Vehicle := Object clone
==>  Vehicle_0x21c2680:
  type             = "Vehicle"

Io> Vehicle description := "Takes you places"
==> Takes you places
Io> Vehicle description
==> Takes you places
Io> Vehicle description print
Takes you places==> Takes you places
Io> Vehicle bogus = "yay"

  Exception: Slot bogus not found. Must define slot using := operator before updating.
  ---------
  message 'updateSlot' in 'Command Line' on line 1

Io> Vehicle slotNames
==> list(description, type)
Io> Vehicle type
==> Vehicle
Io> Object type
==> Object
Io> Car := Vehicle clone
==>  Car_0x2125920:
  type             = "Car"

Io> car slotNames

  Exception: Object does not respond to 'car'
  ---------
  Object car                           Command Line 1

Io> Car slotNames
==> list(type)
Io> Car type
==> Car
Io> Car description
==> Takes you places
Io> ferrari := Car clone
==>  Car_0x20d6278:

Io> ferrari slotNames
==> list()
Io> method("So you came for an argument." println)
==> method(
    "So you came for an argument." println
)
Io> method() type
==> Block
Io> bogus := method("So you came for an argument." println)
==> method(
    "So you came for an argument." println
)
Io> bogus
So you came for an argument.
==> So you came for an argument.
Io> Car drive := method("Vroom" println)
==> method(
    "Vroom" println
)
Io> ferrari drive
Vroom
==> Vroom
Io> ferrari getSlot("drive")
==> method(
    "Vroom" println
)
Io> ferrari proto
==>  Car_0x2125920:
  drive            = method(...)
  type             = "Car"

Io> ferrari proto slotNames
==> list(type, drive)
Io> ferrari proto drive
Vroom
==> Vroom
Io> ferrari proto getSlot("drive")
==> method(
    "Vroom" println
)
Io> ferrari proto
==>  Car_0x2125920:
  drive            = method(...)
  type             = "Car"

Io> Car proto
==>  Vehicle_0x21c2680:
  description      = "Takes you places"
  type             = "Vehicle"

Io> Lobby
==>  Object_0x43f6f8:
  Car              = Car_0x2125920
  Lobby            = Object_0x43f6f8
  Protos           = Object_0x43f698
  Vehicle          = Vehicle_0x21c2680
  _                = Object_0x43f6f8
  bogus            = method(...)
  exit             = method(...)
  ferrari          = Car_0x20d6278
  forward          = method(...)
  set_             = method(...)

Io> _
==>  Object_0x43f6f8:
  Car              = Car_0x2125920
  Lobby            = Object_0x43f6f8
  Protos           = Object_0x43f698
  Vehicle          = Vehicle_0x21c2680
  _                = Object_0x43f6f8
  bogus            = method(...)
  exit             = method(...)
  ferrari          = Car_0x20d6278
  forward          = method(...)
  set_             = method(...)

Io> forward getSlots

  Exception: Object does not respond to 'forward'
  ---------
  Object forward                       Command Line 1

Io> forward

  Exception: Object does not respond to 'forward'
  ---------
  Object forward                       Command Line 1

Io> forward proto

  Exception: Object does not respond to 'forward'
  ---------
  Object forward                       Command Line 1

Io> todos = list("find my car", "find transfunctioner")

  Exception: Slot todos not found. Must define slot using := operator before updating.
  ---------
  message 'updateSlot' in 'Command Line' on line 1

Io> todos := list("find my car", "find transfunctioner")
==> list(find my car, find transfunctioner)
Io> todos := ("find my car", "find transfunctioner") list

  Exception: compile error: Assign operator passed multiple arguments, e.g., a := (b, c).
  ---------
  message ':=' in '[unlabeled]' on line 1

Io> true
==> true
Io> true proto
==>  Object_0x8b16c8:
                   = Object_()
  !=               = Object_!=()
  -                = Object_-()
  ..               = method(arg, ...)
  <                = Object_<()
  <=               = Object_<=()
  ==               = Object_==()
  >                = Object_>()
  >=               = Object_>=()
  ?                = method(...)
  @                = method(...)
  @@               = method(...)
  actorProcessQueue = method(...)
  actorRun         = method(...)
  ancestorWithSlot = Object_ancestorWithSlot()
  ancestors        = method(a, ...)
  and              = method(v, ...)
  appendProto      = Object_appendProto()
  apropos          = method(keyword, ...)
  argIsActivationRecord = Object_argIsActivationRecord()
  argIsCall        = Object_argIsCall()
  asSimpleString   = method(...)
  asString         = method(keyword, ...)
  asyncSend        = method(...)
  become           = Object_become()
  block            = Object_block()
  break            = Object_break()
  clone            = Object_clone()
  cloneWithoutInit = Object_cloneWithoutInit()
  compare          = Object_compare()
  contextWithSlot  = Object_contextWithSlot()
  continue         = Object_continue()
  coroDo           = method(...)
  coroDoLater      = method(...)
  coroFor          = method(...)
  coroWith         = method(...)
  currentCoro      = method(...)
  deprecatedWarning = method(newName, ...)
  do               = Object_do()
  doFile           = Object_doFile()
  doMessage        = Object_doMessage()
  doRelativeFile   = method(path, ...)
  doString         = Object_doString()
  evalArg          = Object_evalArg()
  evalArgAndReturnNil = Object_evalArgAndReturnNil()
  evalArgAndReturnSelf = Object_evalArgAndReturnSelf()
  for              = Object_for()
  foreachSlot      = method(...)
  futureSend       = method(...)
  getLocalSlot     = Object_getLocalSlot()
  getSlot          = Object_getSlot()
  handleActorException = method(e, ...)
  hasDirtySlot     = Object_hasDirtySlot()
  hasLocalSlot     = Object_hasLocalSlot()
  hasProto         = Object_hasProto()
  hasSlot          = method(n, ...)
  if               = Object_if()
  ifError          = method(...)
  ifNil            = Object_thisContext()
  ifNilEval        = Object_thisContext()
  ifNonNil         = Object_evalArgAndReturnSelf()
  ifNonNilEval     = Object_evalArg()
  in               = method(aList, ...)
  init             = Object_init()
  inlineMethod     = method(...)
  isActivatable    = Object_isActivatable()
  isError          = false
  isIdenticalTo    = Object_isIdenticalTo()
  isKindOf         = method(anObject, ...)
  isLaunchScript   = method(...)
  isNil            = false
  isTrue           = true
  justSerialized   = method(stream, ...)
  launchFile       = method(path, args, ...)
  lazySlot         = method(...)
  lexicalDo        = Object_lexicalDo()
  list             = method(...)
  loop             = Object_loop()
  markClean        = Object_markClean()
  memorySize       = Object_memorySize()
  message          = Object_message()
  method           = Object_method()
  newSlot          = method(name, value, doc, ...)
  not              = nil
  or               = true
  ownsSlots        = Object_ownsSlots()
  pause            = method(...)
  perform          = Object_perform()
  performWithArgList = Object_performWithArgList()
  prependProto     = Object_prependProto()
  print            = method(...)
  println          = method(...)
  proto            = Object_proto()
  protos           = Object_protos()
  raiseIfError     = method(...)
  relativeDoFile   = method(path, ...)
  removeAllProtos  = Object_removeAllProtos()
  removeAllSlots   = Object_removeAllSlots()
  removeProto      = Object_removeProto()
  removeSlot       = Object_removeSlot()
  resend           = method(...)
  return           = Object_return()
  returnIfError    = method(...)
  returnIfNonNil   = Object_returnIfNonNil()
  serialized       = method(stream, ...)
  serializedSlots  = method(stream, ...)
  serializedSlotsWithNames = method(names, stream, ...)
  setIsActivatable = Object_setIsActivatable()
  setProto         = Object_setProto()
  setProtos        = Object_setProtos()
  setSlot          = Object_setSlot()
  setSlotWithType  = Object_setSlotWithType()
  shallowCopy      = Object_shallowCopy()
  slotDescriptionMap = method(...)
  slotNames        = Object_slotNames()
  slotSummary      = method(keyword, ...)
  slotValues       = Object_slotValues()
  stopStatus       = Object_stopStatus()
  super            = method(...)
  switch           = method(...)
  thisContext      = Object_thisContext()
  thisLocalContext = Object_thisLocalContext()
  thisMessage      = Object_thisMessage()
  try              = method(...)
  type             = Object_type()
  uniqueHexId      = method(...)
  uniqueId         = Object_uniqueId()
  updateSlot       = Object_updateSlot()
  wait             = method(s, ...)
  while            = Object_while()
  write            = Object_write()
  writeln          = Object_writeln()
  yield            = method(...)

Io> 0
==> 0
Io> if
==> false
Io> if 0
==> 0
Io> if(0,"yay","no")
==> yay
Io> if(nil,"yay","no")
==> no
Io> if("","yay","no")
==> yay
Io> if getSlots

  Exception: false does not respond to 'getSlots'
  ---------
  false getSlots                       Command Line 1

Io> if slots

  Exception: false does not respond to 'slots'
  ---------
  false slots                          Command Line 1

Io> Ferrari getSlots

  Exception: Object does not respond to 'Ferrari'
  ---------
  Object Ferrari                       Command Line 1

Io> Ferrari showSlots

  Exception: Object does not respond to 'Ferrari'
  ---------
  Object Ferrari                       Command Line 1

Io> Ferrari slotNames

  Exception: Object does not respond to 'Ferrari'
  ---------
  Object Ferrari                       Command Line 1

Io> slotNames(Ferrari)
==> list(Car, _, Vehicle, forward, Lobby, bogus, ferrari, exit, set_, todos, Protos)
Io> ferrari slotNames
==> list()
Io> Car slotNames
==> list(type, drive)
Io> Car drive
Vroom
==> Vroom
Io> Car "drive"
==> drive
Io> Car
==>  Car_0x2125920:
  drive            = method(...)
  type             = "Car"

Io> Car "yaaaay"
==> yaaaay
Io> call Car "drive"

  Exception: Object does not respond to 'call'
  ---------
  Object call                          Command Line 1

Io> Car call("drive")

  Exception: Car does not respond to 'call'
  ---------
  Car call                             Command Line 1

Io> Car getSlot("drive")
==> method(
    "Vroom" println
)
Io> Car getSlot("drive") call
Vroom
==> Vroom
